{"remainingRequest":"/home/runner/work/CF3_82110051_DEFINICION_CODIGO_APLICAR/CF3_82110051_DEFINICION_CODIGO_APLICAR/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/runner/work/CF3_82110051_DEFINICION_CODIGO_APLICAR/CF3_82110051_DEFINICION_CODIGO_APLICAR/src/views/Tema1.vue?vue&type=template&id=5bcf8bd0&lang=pug","dependencies":[{"path":"/home/runner/work/CF3_82110051_DEFINICION_CODIGO_APLICAR/CF3_82110051_DEFINICION_CODIGO_APLICAR/src/views/Tema1.vue","mtime":1740429045734},{"path":"/home/runner/work/CF3_82110051_DEFINICION_CODIGO_APLICAR/CF3_82110051_DEFINICION_CODIGO_APLICAR/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/CF3_82110051_DEFINICION_CODIGO_APLICAR/CF3_82110051_DEFINICION_CODIGO_APLICAR/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/CF3_82110051_DEFINICION_CODIGO_APLICAR/CF3_82110051_DEFINICION_CODIGO_APLICAR/node_modules/babel-loader/lib/index.js","mtime":456789000000},{"path":"/home/runner/work/CF3_82110051_DEFINICION_CODIGO_APLICAR/CF3_82110051_DEFINICION_CODIGO_APLICAR/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/runner/work/CF3_82110051_DEFINICION_CODIGO_APLICAR/CF3_82110051_DEFINICION_CODIGO_APLICAR/node_modules/pug-plain-loader/index.js","mtime":499162500000},{"path":"/home/runner/work/CF3_82110051_DEFINICION_CODIGO_APLICAR/CF3_82110051_DEFINICION_CODIGO_APLICAR/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/CF3_82110051_DEFINICION_CODIGO_APLICAR/CF3_82110051_DEFINICION_CODIGO_APLICAR/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}